Checklist Final para la Entrega
1. El Código (PoC - Prueba de Concepto) - ¡HECHO!
Ya tienes un código que sustenta sólidamente tu MVP. Has hecho un gran trabajo aquí.
2. El Documento y la Presentación (PPT)
Esta es ahora tu tarea principal. Tu documento y PPT deben incluir y explicar todo lo que hemos construido. Aquí están las secciones clave que debes asegurar tener:
a) Diagrama de Arquitectura (¡CRÍTICO!)
•
Qué hacer: Dibuja un diagrama simple que muestre los dos componentes principales de tu sistema y cómo se comunican.
•
Cómo dibujarlo:
◦
Crea una caja grande llamada "Aplicación Principal (Servidor Java)". Dentro, puedes mostrar las capas: Controller, Service, Repository y la base de datos H2.
◦
Crea una segunda caja llamada "Microservicio de Predicción (Servidor Python)".
◦
Dibuja una flecha que vaya desde el "Servicio Python" hacia la "Aplicación Java", y etiquétala como "API REST (HTTP GET a /api/historial)".
•
Por qué es importante: Esto demuestra que entendiste cómo diseñar un sistema desacoplado, una de las decisiones más importantes que tomaste.
b) Tecnologías Seleccionadas
•
Qué hacer: Lista las tecnologías y justifica brevemente por qué las elegiste.
•
Ejemplo:
◦
Spring Boot (Java): Para el desarrollo rápido y robusto del backend transaccional.
◦
Spring Data JPA: Para abstraer la lógica de la base de datos y facilitar un futuro cambio de H2 a SQL Server.
◦
Python con Flask: Elegido específicamente para el módulo de análisis de datos, aprovechando su potente ecosistema de librerías.
◦
Pandas y Scikit-learn: Para la manipulación de datos y la creación del modelo de predicción de tendencia.
◦
Matplotlib/Seaborn: Para la generación de visualizaciones y gráficos.
c) Módulo de Predicción (¡LUCE TUS GRÁFICOS!)
•
Qué hacer: Dedica una sección especial a este módulo.
•
Contenido:
i.
Explica la arquitectura de microservicio.
ii.
Inserta capturas de pantalla de alta calidad de la página del informe (/informe-prediccion).
iii.
Explica la diferencia entre los dos gráficos:
▪
Gráfico Descriptivo (Barras): "Este gráfico resume los datos históricos para identificar los recursos más populares, permitiendo una gestión de inventario más eficiente."
▪
Gráfico Predictivo (Líneas): "Este gráfico utiliza una regresión lineal para analizar la tendencia de reservas a lo largo del tiempo, permitiendo pronosticar si la demanda futura será mayor o menor."
d) Modelo de Pruebas
•
Qué hacer: Explica la estrategia de pruebas que implementamos.
•
Contenido: Menciona los tres tipos de pruebas que creamos y su propósito:
◦
Pruebas de Repositorio (@DataJpaTest): Para garantizar que las consultas a la base de datos son correctas.
◦
Pruebas Unitarias de Servicio (Mockito): Para verificar la lógica de negocio (ej. validación de disponibilidad) de forma aislada y rápida.
◦
Pruebas de Controlador (@WebMvcTest): Para asegurar que los endpoints de la API responden correctamente a las peticiones web.
e) Plataforma de Despliegue Propuesta (¡IMPORTANTE!)
•
Qué hacer: La consigna pide "plantear la plataforma donde se realizará el despliegue". Debes proponer una solución moderna.
•
Propuesta recomendada:
◦
Contenerización: "Se propone contenerizar ambas aplicaciones (Java y Python) usando Docker. Esto crea 'cajas' portátiles y aisladas para cada servicio."
◦
Orquestación Local: "Para el desarrollo y pruebas locales, se utilizaría Docker Compose para levantar ambos contenedores con un solo comando."
◦
Despliegue en la Nube: "Para producción, se desplegarían los contenedores en una plataforma en la nube como AWS Elastic Beanstalk, Google Cloud Run o Azure App Service, que gestionan automáticamente el escalado y la infraestructura."
Resumen
Estás en una posición excelente. El trabajo técnico pesado está hecho y bien hecho. Ahora solo necesitas "empaquetarlo" en un buen documento y una buena presentación que cuenten la historia de tu proyecto y resalten las decisiones de diseño inteligentes que tomaste.
¡Mucho éxito en tu entrega final